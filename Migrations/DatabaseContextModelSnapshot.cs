// <auto-generated />
using System;
using KaravanCoffeeWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KaravanCoffeeWebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.LoyalityDetail", b =>
                {
                    b.Property<int>("LoyalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("LoyalityPoint")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("LoyalityId");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("LoyalityDetail");
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveredBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PickupDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RedeemedPoints")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.Property<byte>("Void")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("OrderId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<double>("SubTotal")
                        .HasColumnType("double");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("MainIngredients")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductCategory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProductPoint")
                        .HasColumnType("int");

                    b.Property<string>("ProductSubCategory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<bool>("RequireExtra")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TotalOrdered")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000001",
                            ProductDescription = "",
                            ProductName = "ANBESA BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 35.0
                        },
                        new
                        {
                            ProductId = 2,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000002",
                            ProductDescription = "",
                            ProductName = "ARADA BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 45.0
                        },
                        new
                        {
                            ProductId = 3,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000003",
                            ProductDescription = "",
                            ProductName = "BEDELE BEER BIG",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 45.0
                        },
                        new
                        {
                            ProductId = 4,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000004",
                            ProductDescription = "",
                            ProductName = "BEDELE BEER SMALL",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 5,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000005",
                            ProductDescription = "",
                            ProductName = "CASTLE BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 6,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000006",
                            ProductDescription = "",
                            ProductName = "DASHEN BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 7,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000007",
                            ProductDescription = "",
                            ProductName = "HABESHA BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 8,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000008",
                            ProductDescription = "",
                            ProductName = "HARAR BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 9,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000009",
                            ProductDescription = "",
                            ProductName = "HEINEKEN BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 33.0
                        },
                        new
                        {
                            ProductId = 10,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000010",
                            ProductDescription = "",
                            ProductName = "MALTA",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 11,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000011",
                            ProductDescription = "",
                            ProductName = "SENQ BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 12,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000012",
                            ProductDescription = "",
                            ProductName = "ST GEORGE BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        },
                        new
                        {
                            ProductId = 13,
                            Active = false,
                            Discount = 0.0,
                            ImagePath = "",
                            MainIngredients = "",
                            ProductCategory = "ALCOHOLIC BEVERAGES",
                            ProductCode = "PML-000013",
                            ProductDescription = "",
                            ProductName = "WALIA BEER",
                            ProductPoint = 0,
                            ProductSubCategory = "BOTTLED BEER",
                            Rating = 5.0,
                            RequireExtra = false,
                            TotalOrdered = 0,
                            UnitPrice = 43.0
                        });
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.ProductAvailability", b =>
                {
                    b.Property<int>("ProductAvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("MaxThreshold")
                        .HasColumnType("int");

                    b.Property<int>("MinThreshold")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductAvailabilityId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAvailability");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7231ce0b-7d7f-43cb-95f1-e814711e71c8",
                            ConcurrencyStamp = "31be6789-f03b-4561-b86f-d16aa247298a",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "18fb115f-a8ba-4f66-a090-a86aa012d6ea",
                            ConcurrencyStamp = "04f3a2f4-1056-430f-9910-f95e521f0d15",
                            Name = "Branch Admin",
                            NormalizedName = "BRANCH ADMIN"
                        },
                        new
                        {
                            Id = "24765097-8ee5-49d6-a98d-290383b0f563",
                            ConcurrencyStamp = "b779c006-c61d-4c86-9572-ded562582858",
                            Name = "System Admin",
                            NormalizedName = "SYSTEM ADMIN"
                        },
                        new
                        {
                            Id = "08d2c838-ecb2-45af-9d7e-0f40bf0a4d45",
                            ConcurrencyStamp = "a223c7e9-0d44-4f2f-b5d7-38f2dac2429e",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.LoyalityDetail", b =>
                {
                    b.HasOne("KaravanCoffeeWebAPI.Data.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaravanCoffeeWebAPI.Data.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.Order", b =>
                {
                    b.HasOne("KaravanCoffeeWebAPI.Data.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaravanCoffeeWebAPI.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.OrderDetail", b =>
                {
                    b.HasOne("KaravanCoffeeWebAPI.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaravanCoffeeWebAPI.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KaravanCoffeeWebAPI.Data.ProductAvailability", b =>
                {
                    b.HasOne("KaravanCoffeeWebAPI.Data.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaravanCoffeeWebAPI.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KaravanCoffeeWebAPI.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KaravanCoffeeWebAPI.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaravanCoffeeWebAPI.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KaravanCoffeeWebAPI.Data.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
